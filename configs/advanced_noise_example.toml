# Advanced Noise Techniques Configuration Example
# This configuration demonstrates how to use the new advanced noise generation techniques

[model]
model_path = "stabilityai/stable-diffusion-xl-base-1.0"
model_name = "sdxl_advanced_noise_test"
save_dir = "out/advanced_noise_tests"

[data]
meta_path = "datasets/example/metadata"
image_path = "datasets/example/images"
batch_size = 4
n_epochs = 5

[training]
mode = "lokr"
unet_lr = 1e-5
gradient_accumulation_steps = 2
mixed_precision = "bf16"
weight_dtype = "bf16"
save_dtype = "fp16"

# ============================================
# ADVANCED NOISE TECHNIQUES
# ============================================

# Pyramid Noise: Generates noise at multiple scales for improved quality
use_pyramid_noise = true
pyramid_noise_discount = 0.8    # How much each level is reduced (0.5-0.9 recommended)
pyramid_noise_levels = 4        # Number of pyramid levels (3-6 recommended)

# Multi-resolution Noise: Alternative to pyramid noise with explicit scale control
# use_multi_resolution_noise = true
# multi_res_noise_scales = [1.0, 0.5, 0.25, 0.125]
# multi_res_noise_weights = [0.4, 0.3, 0.2, 0.1]  # Optional custom weights

# Range-based Timestep Sampling: Focus training on specific noise levels
timestep_focus_range = [0.2, 0.8]  # Focus on medium noise levels (0.0 = no noise, 1.0 = full noise)
timestep_focus_strength = 2.0       # How much to emphasize the focus range (>1.0 = more focus)

# Smooth Min-SNR Weighting: Smoother loss weighting compared to hard clipping
snr_gamma = 5.0                    # Standard Min-SNR gamma value
use_smooth_min_snr = true          # Use smooth transition instead of hard clipping
smooth_min_snr_mode = "sigmoid"    # Options: "clip", "sigmoid", "tanh"
smooth_min_snr_factor = 0.1        # Lower = smoother transition (0.01-0.5 recommended)

# Adaptive Noise Scheduling: Modify noise strength based on timestep
use_adaptive_noise = true
adaptive_noise_type = "cosine"     # Options: "linear", "cosine", "exponential"
adaptive_noise_strength = 1.0      # Overall noise strength multiplier

# Traditional noise techniques (can be combined with advanced techniques)
noise_offset = 0.05                # Traditional noise offset
input_perturbation = 0.05          # Input perturbation for stability

# Flash Attention (xformers) for memory efficiency - ENABLED BY DEFAULT!
# enable_flash_attention = true      # Enable Flash Attention (default: true)
# flash_attention_unet = true        # Enable for UNet (biggest memory impact)
# flash_attention_text_encoder = true # Enable for text encoders

# Other advanced training options
use_debiased_estimation = true     # Debiased SNR estimation
prediction_type = "v_prediction"   # Often works better with advanced noise techniques

[sampling]
# Preview generation settings
preview_every_n_epochs = 1

[[preview_sample_options]]
prompt = "a beautiful landscape with mountains and trees"
negative_prompt = "blurry, low quality"
steps = 25
seed = 42
width = 1024
height = 1024

[[preview_sample_options]]
prompt = "portrait of a cat, highly detailed"
negative_prompt = "blurry, distorted"
steps = 30
seed = 123
width = 1024
height = 1024

[logging]
log_with = "wandb"  # or "tensorboard" or "none"

# ============================================
# RECOMMENDED COMBINATIONS
# ============================================

# For high quality training (slower):
# - use_pyramid_noise = true, pyramid_noise_levels = 5
# - use_smooth_min_snr = true, smooth_min_snr_mode = "sigmoid"
# - timestep_focus_range = [0.1, 0.9], timestep_focus_strength = 1.5
# - use_adaptive_noise = true, adaptive_noise_type = "cosine"

# For faster training with quality improvements:
# - use_pyramid_noise = true, pyramid_noise_levels = 3
# - timestep_focus_range = [0.3, 0.7], timestep_focus_strength = 2.0
# - snr_gamma = 5.0 (without smooth SNR)

# For experimental/research:
# - use_multi_resolution_noise = true
# - smooth_min_snr_mode = "tanh", smooth_min_snr_factor = 0.05
# - adaptive_noise_type = "exponential"